// Name and UIN
 /**Author: Quy Dao
 * Date: 07/13/2020
 * Email: quydao1462@tamu.edu
 * CSCE 312
 */
/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */
//A-instruction
//instruction[0..14]
//C-instruction
//inversed
//instruction[12] = a and similarly
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	// determine whether it's A or C instruction
    Not(in  = instruction[15], out = Ainst);
	Not(in = Ainst, out = Cinst);
	
	//A registers
	And(a = Cinst, b = instruction[5], out = Acompute);
	Mux16(a= instruction, b = ALUout, sel = instruction[15], out = AtoReg);
	Or(a= Ainst, b = Acompute, out= Aload);
	ARegister(in = AtoReg, load = Aload, out = a);
	
	
	//D registers
	And(a = instruction[4], b = Cinst, out = DtoReg);
	DRegister(in = ALUout, load = DtoReg, out = d);
	
	//ALU
	Mux16(a = a, b = inM,sel = instruction[12], out = Aout);
	And(a = instruction[6], b = true, out = no);
	And(a = instruction[7], b = true, out = f);
	And(a = instruction[8], b = true, out = ny);
	And(a = instruction[9], b = true, out = zy);
	And(a = instruction[10], b = true, out = nx);
	And(a = instruction[11], b = true, out = zx);
	ALU(x = d, y = Aout, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no= no, out = ALUout, zr = zr, ng= ng);
	
	//jumps
	Not(in = zr, out = nzr);
	Not(in = ng, out = nng);
	And(a = nzr,b = nng, out = pos);
	And(a = instruction[0], b = pos, out = jpos);
	And(a = instruction[1], b = zr, out = jz);
	And(a = instruction[2], b = ng, out = jlt);
	Or(a = jlt, b = jz, out = jltz);
	Or(a = jltz, b = jpos, out = jcon);
	And(a = Cinst, b= jcon, out = jump);
	
	//outM
	And16(a=ALUout, b = true, out = outM);
	
	//writeM
	And(a= Cinst, b = instruction[3],out = writeM);
	
	//addressM
	And16(a = a, b = true, out[0..14] = addressM);
	

	//Program counter
	PC(in = a, load = jump, inc= true, reset =reset, out[0..14] = pc);
	
	
	
}